#!/usr/bin/env python2

from __future__ import with_statement
from __future__ import absolute_import
import os
import sys
import re
import math
import glob
import subprocess
import argparse
from string import Template
from collections import defaultdict
from io import open

# The AGV_EDITOR environmental variable
# default: $EDITOR, then 'vi'
# suggested:
#   AGV_EDITOR='vv $file:$line:$col'
#   AGV_EDITOR='vim +$line $file'
# escape: '$$' (but shell may recognize it!)
# unknown -> ''
editor = os.environ.get(u'AGV_EDITOR', os.environ.get(u'EDITOR', u'vi'))

if editor in (u'vi', u'vim'):
    editor += u' +$line'

if u'$file' not in editor:
    editor += u' $file'
editor = Template(editor)

if u'XDG_RUNTIME_DIR' in os.environ:
    logfile_base = u'%s/.agg.log' % os.environ[u'XDG_RUNTIME_DIR']
else:
    logfile_base = u'/%s/%d/.agg.log' % (os.environ.get(u'TMPDIR', u'/tmp'),
                                         os.getuid())
matcher = re.compile(
    ur'''
                     \s*\d+\s*          # column number
                     (?:\x1b[^mK]+[mK])*
                     (?P<file>[^\x1b]+)
                     (?:\x1b[^mK]+[mK])*
                     [^:]+:
                     (?:\x1b[^mK]+[mK])*
                     (?P<line>\d+)
                     (?:\x1b[^mK]+[mK])*
                     (?:[^:]*:
                     (?:\x1b[^mK]+[mK])*
                     (?P<col>\d+))?
                     ''', re.VERBOSE)


def get_logfile(index):
    u'''
  index == 0: try to choose one depending on ttyname
  index > 0: file index after sorting
  index < 0:  return all files
  '''
    files = None

    if index <= 0:
        try:
            ttyname = os.ttyname(sys.stderr.fileno()).replace(u'/', u'_')
        except OSError:
            try:
                ttyname = os.ttyname(sys.stdout.fileno()).replace(u'/', u'_')
            except OSError:
                ttyname = os.ttyname(sys.stdin.fileno()).replace(u'/', u'_')

        try_file = logfile_base + u'.' + ttyname

        if os.path.exists(try_file):
            if index == 0:
                return try_file
            else:
                files = [try_file]

    if files:
        files += [x for x in glob.glob(logfile_base + u'*') if x != files[0]]
    else:
        files = glob.glob(logfile_base + u'*')
    files.sort(reverse=True, key=lambda f: os.stat(f).st_mtime)

    if index > 0:
        return files[index - 1]
    elif index == 0:
        return files[0]
    else:
        return files


def edit(line):
    m = matcher.match(line)
    info = m.groupdict()

    if not info[u'col']:
        info[u'col'] = u'0'
    print u'File: %(file)s, Line %(line)s, Col %(col)s.' % info
    d = defaultdict(unicode)
    d.update(info)
    cmd = editor.substitute(d)
    os.system(cmd)


def edit_entry(n, logfile):
    try:
        with open(logfile, encoding=u'utf-8', errors=u'surrogateescape') as f:
            os.chdir(f.readline()[:-1])
            f.readline()  # args

            for i, l in enumerate(f):
                if i == n - 1:
                    edit(l[:-1])

                    break
            else:
                sys.exit(u'out of index.')
    except IOError, e:
        print >> sys.stderr, u'Error opening logfile %s: %s' % (logfile, e)
        sys.exit(2)


def cat(logfile):
    if sys.stdout.isatty():
        p = subprocess.Popen([os.environ.get(u'PAGER', u'less')],
                             stdin=subprocess.PIPE,
                             universal_newlines=True)
        output = p.stdin
    else:
        p = None
        output = sys.stdout

    try:
        with open(logfile) as f:
            f.readline()  # directory
            f.readline()  # args

            for l in f:
                output.write(l)
    except IOError:  # SIGPIPE
        pass
    finally:
        if p:
            try:
                output.close()
            except IOError:  # still SIGPIPE
                pass
            p.wait()


def list_logfiles(logfiles):
    args = []
    dirs = []

    for log in logfiles:
        with open(log, errors=u'replace') as f:
            dirs.append(f.readline()[:-1])
            args.append(f.readline()[:-1])

    fmt = u'%%%dd: %%-%ds (dir: %%s)' % (
        math.ceil(math.log10(len(logfiles))),
        min(max(len(x) for x in args), 40),
    )

    for i in xrange(len(args)):
        print fmt % (i + 1, args[i], dirs[i])


def main():
    parser = argparse.ArgumentParser(description=u'view and go to agg results')
    parser.add_argument(
        u'indices',
        metavar=u'N',
        type=int,
        nargs=u'*',
        help=u'index of result entry to go to')
    parser.add_argument(
        u'-l',
        action=u'store_true',
        default=False,
        help=u'list results (same without args)')
    parser.add_argument(
        u'-L',
        u'--list',
        action=u'store_true',
        default=False,
        help=u'list all log files')
    parser.add_argument(
        u'-f',
        u'--file',
        type=int,
        default=0,
        metavar=u'NUMBER',
        help=u'explicitly select a log file')

    args = parser.parse_args()

    if args.list:
        logfiles = get_logfile(-1)

        if not logfiles:
            sys.exit(u'no agg log files')
        list_logfiles(logfiles)
    else:
        try:
            logfile = get_logfile(args.file)
        except IndexError:
            sys.exit(u'no agg log files')

        if args.indices:
            for index in args.indices:
                edit_entry(index, logfile)
        else:
            cat(logfile)


if __name__ == u'__main__':
    try:
        import setproctitle
        setproctitle.setproctitle(u'agv')
    except ImportError:
        pass

    main()
