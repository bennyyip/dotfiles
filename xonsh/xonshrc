#TODO agv rgg
import os.path
from os import path

from xonsh import platform
from xonsh.tools import unthreadable

if platform.ON_WINDOWS:
    $HOME = $USERPROFILE

source f'{$HOME}/dotfiles/xonsh/setting.xsh'

source f'{$HOME}/dotfiles/xonsh/key.xsh'

imp = type('ImpCl', (object,), {'__getattr__':lambda self, name: __import__(name) })()

# aliases [[[1
source f'{$HOME}/dotfiles/xonsh/alias.py'

source f'{$HOME}/dotfiles/xonsh/fzf.xsh'

# if platform.ON_LINUX:
#     source-bash f'{$HOME}/dotfiles/shell/plugins/fzf.sh' --suppress-skip-message

# WORKAROUND: hangs on winodws if it is not unthreadable
@aliases.register('update')
@unthreadable
def __update():
    source ~/.xonshrc

@aliases.register('ols')
@unthreadable
def __ols(args):
    python f'{$HOME}/dotfiles/python/open-livestream.py' @(args)

@aliases.register('proxy_on')
def __enable_proxy():
    proxy = "http://127.0.0.1:10809"
    $HTTP_PROXY = proxy
    $HTTPS_PROXY = proxy

@aliases.register('proxy_off')
def __disable_proxy():
    $HTTP_PROXY = ''
    $HTTPS_PROXY = ''

if platform.ON_WINDOWS:
    @aliases.register('ii')
    def __ii(args):
        explorer @(Path(args[0]).absolute())

@aliases.register("ssh")
def __ssh(args):
    with ${...}.swap(TERM="xterm-256color"):
        ssh @(args)


# plugins [[[1

@aliases.register("install_xtrib")
def __install_xtrib():
    for pkg in [
        'xontrib-zoxide',
        'xontrib-sh',
        'xontrib-prompt-starship',
        'xontrib-free-cwd',
    ]:
        xpip install -U @(pkg)

$STARSHIP_CONFIG = '~/.config/starship_xonsh.toml'
$_ZO_FZF_OPTS = $FZF_DEFAULT_OPTS

xontrib load zoxide
xontrib load sh
xontrib load prompt_starship
xontrib load free_cwd

# local xonshrc [[[1
local_xonshrc = pf'{$HOME}/local.xsh'
if local_xonshrc.exists():
    source @(local_xonshrc)


#  vim:fdm=marker:fmr=[[[,]]]:ft=xonsh
